# Test environment overrides
services:
  db:
    image: postgres:14
    environment:
      - POSTGRES_PASSWORD=testpass123
      - POSTGRES_USER=postgres
      - POSTGRES_DB=samaanai_test
    ports:
      - "5432:5432"
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend-test:
    build:
      context: ./backend
      dockerfile: Dockerfile.test
    networks:
      - test-network
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - POSTGRES_DB=samaanai_test
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=testpass123
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1
      - CORS_ALLOWED_ORIGINS=http://frontend-dev:3000
      - ENVIRONMENT=test
      - DEBUG=True
      - SECRET_KEY=test-secret-key
      - PROJECT_ID=test-project-id
      - GS_BUCKET_NAME=test-bucket
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend-test-results:/app/test-results
    command: python manage.py test

  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: dev
    networks:
      - test-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - frontend-test-results:/app/coverage
      - frontend-test-results:/app/test-reports
      - frontend-test-results:/tmp/frontend-test-results
    environment:
      - CI=true
      - REACT_APP_API_URL=http://backend-test:8000/api
      - NODE_ENV=test
      - GENERATE_SOURCEMAP=false
      - SKIP_PREFLIGHT_CHECK=true
    working_dir: /app
    # Use default Node image entrypoint
    command: ["npm", "test", "--", "--coverage", "--watchAll=false"]

  # Enhanced Cypress service with better artifact handling
  cypress:
    image: cypress/included:12.17.4
    networks:
      - test-network
    depends_on:
      - backend-test
      - frontend-dev
    volumes:
      - ./frontend:/app
      - cypress-results:/cypress/videos
      - cypress-screenshots:/cypress/screenshots
      - cypress-results:/tmp/cypress-results
    environment:
      - CYPRESS_baseUrl=http://frontend-dev:3000
      - CYPRESS_VIDEO=true
      - CYPRESS_SCREENSHOT_ON_RUN_FAILURE=true
    working_dir: /app
    command: |
      sh -c "
        echo 'Starting Cypress E2E tests...' &&
        cypress run --config video=true,screenshotOnRunFailure=true &&
        echo 'Cypress tests completed'
      "

  # For E2E testing we need a running frontend
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: dev
      args:
        ENVIRONMENT: development
    networks:
      - test-network
    environment:
      - REACT_APP_API_URL=http://backend-test:8000/api
      - NODE_ENV=development
    depends_on:
      - backend-test
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Test report generator service
  test-reporter:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: dev
    networks:
      - test-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - frontend-test-results:/app/test-reports
      - frontend-test-results:/tmp/frontend-test-results
    environment:
      - CI=true
      - NODE_ENV=test
    working_dir: /app
    entrypoint: |
      sh -c "
        chmod +x run_all_tests.js &&
        npm install &&
        echo 'Generating comprehensive test reports...' &&
        node run_all_tests.js &&
        echo 'Test reports generated successfully'
      "
    command: ["echo", "Test reporter ready"]

networks:
  test-network:
    driver: bridge

volumes:
  backend-test-results:
  frontend-test-results:
  cypress-results:
  cypress-screenshots: 